import * as U from './util.js';
import ROT from 'rot-js';
import {Tile, TILES} from './tile.js';

export function rotate(grid, dir){
  //dir: -1 is ccw, 0 is none, 1 is cw

  if(dir==0){
    return grid;
  }

  let rows = grid.length;
  let columns = grid[0].length;

  let newGrid = U.init2DArray(columns, rows, '-');
  for(let xi = 0; xi < columns; xi++){
    for(let yi = 0; yi < rows; yi++){
      if(dir > 0){
        newGrid[xi][rows-yi-1] = grid[yi][xi];
      }
      else{
        newGrid[columns-xi-1][yi] = grid[yi][xi];
      }
    }
  }

  if(dir==2){
    newGrid = rotate(newGrid, 1);
  }

  return newGrid;

}

export function parseCharsToTiles(grid){
  //parses a grid of chars and converts it to a grid of tiles
  let ydim = grid.length;
  let xdim = grid[0].length;

  let tileGrid = U.init2DArray(ydim, xdim, TILES.NULLTILE);

  for(let row = 0; row < ydim; row++){
    for(let col = 0; col < xdim; col++){
      tileGrid[ydim-row-1][col] = charsToTiles[grid[row][col]];
    }
  }

  return tileGrid;
}

export function tryPlaceStructure(canvas, structure, canvasX, canvasY, dir){

  if(dir){
    structure = rotate(structure, dir);
  }

  //places *middle* of structure at cX, cY in canvas grid
  //calculate midpoint of structure
  let structureWidth = structure[0].length;
  let structureHeight = structure.length;
  //Mids may mess up on rotation
  let midX = Math.floor(structureWidth/2);
  let midY = Math.floor(structureHeight/2);

  //from this, calculate top left corner pos in canvas
  let canvasTLY = canvasY - midX;
  let canvasTLX = canvasX - midY;

  //loop through struct width
  for(let xi = -2; xi < structureWidth+2; xi++){
    for(let yi = -2; yi < structureHeight+2; yi++){
      if(!canvas[yi+canvasTLX] || !canvas[yi+canvasTLX][xi+canvasTLY]){
        console.log('failed to place a thing because it was out of bounds!');
        return false;
      }
      if(!(canvas[yi+canvasTLX][xi+canvasTLY].isA('floor')) && !(canvas[yi+canvasTLX][xi+canvasTLY].isA('stairs_up')) && !(canvas[yi+canvasTLX][xi+canvasTLY].isA('stairs_down'))){
        console.log('failed to place a thing');
        return false;
      }
    }
  }

  mergeGrids(canvas, structure, canvasX, canvasY);
}

export function mergeGrids(canvas, structure, canvasX, canvasY){
  //places *middle* of structure at cX, cY in canvas grid
  //calculate midpoint of structure
  let structureWidth = structure[0].length;
  let structureHeight = structure.length;
  //Mids may mess up on rotation
  let midX = Math.floor(structureWidth/2);
  let midY = Math.floor(structureHeight/2);

  //from this, calculate top left corner pos in canvas
  let canvasTLY = canvasY - midX;
  let canvasTLX = canvasX - midY;

  //now loop in struct and place the tiles
  //null tiles in the struct are ignored, meant to be 'transparency' in the struct
  for(let xi = 0; xi < structureWidth; xi++){
    for(let yi = 0; yi < structureHeight; yi++){
      if(structure[yi][xi] === TILES.NULLTILE){
        continue;
      }
      else{
        //console.log(`stair: ${yi+canvasTLY},${xi+canvasTLX}`);
        canvas[yi+canvasTLX][xi+canvasTLY] = structure[yi][xi];
      }
    }
  }

}

export function getRandomStructure(structureSet){//probably a bad implementation
  let structs = Array();
  for(let struct in structureSet){
    let n = structureSet[struct].chance;
    for(let i = 0; i < n; i++){
      structs.push(structureSet[struct]);
    }
  }
  let index = Math.floor(ROT.RNG.getUniform()*structs.length);
  //console.dir(structs);
  //console.log(index);
  return structs[index].grid;
}

let charsToTiles = {
  '#': TILES.WALL,
  '.': TILES.FLOOR,
  '|': TILES.GLASS,
  '-': TILES.NULLTILE,
  'T': new Tile({name: 'mob_seed', chr: '?', seedData: {mobName: 'Thomas'}}),
  'd': new Tile({name: 'mob_seed', chr: '?', seedData: {mobName: 'hound'}}),
  'M': new Tile({name: 'mob_seed', chr: '?', seedData: {mobName: 'minotaur'}}),
  'b': new Tile({name: 'mob_seed', chr: '?', seedData: {mobName: 'bat'}}),
  '0': new Tile({name: 'mob_seed', chr: '?', seedData: {mobName: 'chest', lootTable: 'basic'}})
  //0-9 can be loot chests - different
  //a-z mob seeds
}

export let BASIC_FLOOR = {
  STAIRS: {
    grid: [
      ['#', '#', '#', '#', '#'],
      ['#', '.', '.', '.', '#'],
      ['#', '.', '-', '.', '#'],
      ['#', '.', '.', '.', '#'],
      ['#', '#', '.', '#', '#']
    ],
    chance: 0
  },

  ARENA_ROOM: {
    grid: [
      ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
      ['#', 'd', '.', '.', '.', '.', '.', '.', '.', 'd', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#'],
      ['.', '.', '.', '.', '#', '#', '#', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', 'd', '.', '.', '.', '.', '.', '.', '.', 'd', '#'],
      ['#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#'],
    ],

    chance: 2
  },

  ENEMY_ROOM: {
    grid: [
      ['#', '.', '#', '|', '|', '#', '.', '#'],
      ['#', '.', '#', 'd', 'd', '#', '.', '#'],
      ['#', 'b', '#', 'd', 'd', '#', 'b', '#'],
      ['#', 'b', '#', '#', '.', '#', 'b', '#'],
      ['#', 'b', '#', '.', '.', '#', 'b', '#'],
      ['#', 'b', '#', '.', '#', '#', 'b', '#'],
      ['#', '.', '#', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '#', '#', '#', '#', '#', '#', '#'],
    ],

    chance: 2

  },

  FANCY_ROOM: {
    grid: [
      ['#', '|', '|', '|', '|', '|', '|', '|', '|', '#'],
      ['|', '.', '.', '.', '.', '.', '.', '.', '.', '|'],
      ['|', '.', '#', '.', '.', '.', '.', '#', '.', '|'],
      ['|', '.', '#', '#', '#', '#', '#', '#', '.', '|'],
      ['|', '.', '#', '.', '.', '.', '.', '#', '.', '|'],
      ['|', '.', '.', '.', '.', '.', '.', '.', '.', '|'],
      ['.', '.', '.', '#', 'd', 'd', '#', '.', '.', '.'],
      ['.', '.', '.', '#', 'd', 'd', '#', '.', '.', '.'],
      ['.', '.', '.', '#', '0', '0', '#', '.', '.', '.'],
      ['.', '.', '.', '#', '#', '#', '#', '.', '.', '.'],
      ['|', '.', '.', '.', '.', '.', '.', '.', '.', '|'],
      ['|', '.', '#', '.', '.', '.', '.', '#', '.', '|'],
      ['|', '.', '#', '#', '#', '#', '#', '#', '.', '|'],
      ['|', '.', '#', '.', '.', '.', '.', '#', '.', '|'],
      ['|', '.', '.', '.', '.', '.', '.', '.', '.', '|'],
      ['#', '|', '|', '|', '|', '|', '|', '|', '|', '#'],
    ],

    chance: 1,
  },

  SMALL_L: {
    grid: [
      ['#', '#', '#', '#', '#', '#', '#'],
      ['#', 'd', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', 'b', '.', '.'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', 'b', '#', '#', '#'],
      ['#', '.', '.', '.', '#', '-', '-'],
      ['#', '#', '.', '#', '#', '-', '-'],
    ],

    chance: 4,
  },

  BIG_L: {
    grid: [
      ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.'],
      ['#', '.', '#', '0', '.', '.', 'b', '.', '.', '#', '.', '.'],
      ['#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['#', '.', '#', '.', 'b', '#', '#', '#', '#', '#', '.', '.'],
      ['#', '.', '#', '.', '.', '#', '#', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '.', 'b', '#', '.', '#', '#', '#', '#', '#'],
      ['#', '.', '#', '.', '.', '#', '.', '#', '-', '-', '-', '-'],
      ['#', '.', '#', '.', '#', '#', '.', '#', '-', '-', '-', '-'],
      ['#', '.', '.', '.', '.', '.', '.', '#', '-', '-', '-', '-'],
      ['#', '#', '.', '.', '.', '.', '#', '#', '-', '-', '-', '-'],
    ],

    chance: 3,
  },

  ROOM_CEPTION: {
    grid: [
      ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '#', '.', '#', '#', '.', '#'],
      ['#', '.', '#', '.', 'd', '.', '#', '.', '#'],
      ['#', '.', '#', '.', '0', '.', '#', '.', '#'],
      ['#', '.', '#', '.', 'd', '.', '#', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '.', '#'],
      ['#', '.', '.', 'd', '#', 'd', '.', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '.', '#']
    ],

    chance: 3
  },

  CHAMBERS: {
    grid: [
      ['#', '#', '#', '#', '#', '-', '-', '-', '-', '#', '#', '.', '#', '#'],
      ['#', '.', 'b', '.', '#', '#', '#', '#', '#', '#', '.', '.', '.', '#'],
      ['#', 'b', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', 'b', '.', '#', '#', '.', '#', '#', '#', '.', '.', '.', '#'],
      ['#', '#', '.', '#', '#', '#', '.', '#', 'd', '#', '#', '.', '#', '#'],
      ['-', '#', '.', '#', '-', '#', '.', '#', '.', '.', '#', '.', '#', '-'],
      ['-', '#', '.', '#', '#', '#', '.', '#', '#', '.', '#', '.', '#', '#'],
      ['-', '#', '.', '#', '#', '.', '.', '.', '#', '.', '#', '.', '.', '#'],
      ['-', '#', '.', '#', '#', 'd', '.', '.', '#', '.', '#', '.', '.', '#'],
      ['-', '#', '.', '#', '#', '.', '0', 'd', '#', 'b', '#', 'b', '.', '#'],
      ['#', '#', '.', '#', '#', 'd', '.', '.', '#', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '#', '.', '0', 'd', '#', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '#', 'd', '.', '.', '#', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '#', '.', 'd', '.', '#', '.', '.', '.', 'b', '#'],
      ['#', '#', '.', '#', '#', '#', '#', '#', '#', '.', '#', '.', '.', '#'],
      ['-', '#', '.', '#', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#'],
    ],

    chance: 1
  },

  FOUR_ROOMS: {
    grid: [
      ['#', '.', '#', '#', '#', '#', '#', '.', '#'],
      ['.', '.', '.', '.', '#', 'd', '.', '.', '.'],
      ['#', '.', '#', '#', '#', '#', '#', '.', '#'],
      ['#', 'd', '#', 'b', '.', '.', '.', '.', '#'],
      ['#', '#', '#', '.', '0', '.', '#', '#', '#'],
      ['#', '.', '#', '.', '.', '.', '#', 'd', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '.', '#'],
      ['.', '.', '.', 'd', '#', '.', '.', '.', '.'],
      ['#', '.', '#', '#', '#', '#', '#', '.', '#']
    ],

    chance: 3
  },

  FOUR_DOORS_SMALL: {
    grid: [
      ['#', '#', '.', '#', '#'],
      ['#', '.', '.', '.', '#'],
      ['.', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '#'],
      ['#', '#', '.', '#', '#']
    ],

    chance: 4
  },

  FOUR_DOORS_MED: {
    grid: [
      ['#', '#', '#', '.', '#', '#', '#'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['.', '.', '.', '#', '.', '.', '.'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['#', '#', '#', '.', '#', '#', '#']
    ],

    chance: 5
  },

  FOUR_DOORS_LARGE: {
    grid: [
      ['#', '#', '#', '#', '.', '#', '#', '#', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['.', '.', '.', '.', '#', '.', '.', '.', '.'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '#', '#', '#', '.', '#', '#', '#', '#']
    ],

    chance: 5
  },

  FOUR_SQUARES_SMALL: {
    grid: [
      ['#', '#', '.', '#', '#'],
      ['#', '#', '.', '#', '#'],
      ['.', '.', 'd', '.', '.'],
      ['#', '#', '.', '#', '#'],
      ['#', '#', '.', '#', '#']
    ],

    chance: 5
  },

  FOUR_SQUARES_MED: {
    grid: [
      ['#', '#', '#', '.', '#', '#', '#'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '.', '#', '.', '#'],
      ['.', '.', '.', '.', '.', '.', '.'],
      ['#', '.', '#', '.', '#', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['#', '#', '#', '.', '#', '#', '#']
    ],

    chance: 4
  },

  FOUR_SQUARES_LARGE: {
    grid: [
      ['#', '#', '#', '#', '.', '#', '#', '#', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '#', '.', '#', '#', '.', '#'],
      ['#', '.', '#', '#', '.', '#', '#', '.', '#'],
      ['.', '.', '.', '.', 'd', '.', '.', '.', '.'],
      ['#', '.', '#', '#', '.', '#', '#', '.', '#'],
      ['#', '.', '#', '#', '.', '#', '#', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '#', '#', '#', '.', '#', '#', '#', '#']
    ],

    chance: 4
  },

  TWO_ROOMS: {
    grid: [
      ['#', '.', '#', '.', '.', '#', '#', '#', '#'],
      ['#', '.', '#', '.', 'd', '#', '.', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '.', '#', '#'],
      ['#', '.', '.', '.', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['#', '.', '.', 'd', '.', '#', '.', '.', '#'],
      ['#', '#', '.', '0', '.', '#', '#', '.', '#'],
      ['.', '#', '.', '.', '.', '#', '.', '.', '#'],
      ['.', '#', '#', '#', '#', '#', '.', '#', '#']
    ],

    chance: 2
  },

  BRAWL_SPOT: {
    grid: [
      ['.', '#', '.', '.', '.', '.', '.', '#', '.'],
      ['#', '#', '#', '.', '.', '.', '#', '#', '#'],
      ['.', '#', '.', '.', '.', '.', '.', '#', '.'],
      ['.', '.', '.', 'd', 'd', 'd', '.', '.', '.'],
      ['.', '.', '.', 'd', 'd', 'd', '.', '.', '.'],
      ['.', '.', '.', 'd', 'd', 'd', '.', '.', '.'],
      ['.', '#', '.', '.', '.', '.', '.', '#', '.'],
      ['#', '#', '#', '.', '.', '.', '#', '#', '#'],
      ['.', '#', '.', '.', '.', '.', '.', '#', '.']

    ],

    chance: 2
  },

  LABYRINTH: {
    grid: [
      ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', 'T', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '#', '.', '#'],
      ['#', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '#', '.', '#'],
      ['#', '#', '#', '#', '.', '.', 'b', 'b', '.', '.', '#', '.', '#', 'd', '.', '.', '.', '#', '.', '#'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '#', '.', '#'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '#', '#', '#'],
      ['.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '#', '.', '#', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '.', '.', '.', '.', '#'],
      ['#', '.', '#', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '#', 'd', '.', '.', '.', '.', 'b', '.', '#', '.', '.', 'd', '.', '.', '#', '#', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '#', '.', 'b', '.', '.', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '#', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '#', '.', '#', '#', '.', '#', '#', '.', 'b', '.', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '.', '#'],
      ['#', '.', '.', '.', '.', '#', '.', '#', '.', 'M', '.', '#', '.', '.', '.', '.', '#', '.', '.', '#'],
      ['#', '.', '#', '.', '.', '#', '.', '#', '.', '0', '.', '#', '.', '.', '.', '.', '#', '.', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '.', '#'],
      ['#', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '#', '.', '.', '#'],
      ['#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '#', '#', '.', '#'],
      ['#', '.', '#', '#', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
      ['#', '.', '#', '#', '.', 'd', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '#'],
      ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#'],

    ],
    chance: 1
  },

  TREASURE_ROOM: {
    grid: [
      ['#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '0', '.', '0', '.', '#'],
      ['#', '.', '.', '0', '.', '.', '#'],
      ['#', '.', '#', '#', '#', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['#', '#', '#', '.', '#', '#', '#']
    ],

    chance: 1
  },
  TRAP_ROOM: {
    grid: [
      ['#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['#', '.', '0', '.', '0', '.', '#'],
      ['#', '.', '.', 'T', '.', '.', '#'],
      ['#', '.', '#', '#', '#', '.', '#'],
      ['#', '.', '.', '.', '.', '.', '#'],
      ['#', '#', '#', '.', '#', '#', '#']
    ],

    chance: 1
  },






}
